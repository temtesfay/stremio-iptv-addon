import axios from 'axios';
import axiosRetry from 'axios-retry';
import { getName } from 'i18n-iso-countries';
import ISO6391 from 'iso-639-1';
import isURL from 'validator/lib/isURL';
axiosRetry(axios, { retries: 3 });
/**A parser for m3u files.
 *
 * It parses the contents of m3u file to a list of streams information which can be saved as a JSON/M3U file.
 * ```
 *  import { M3uParser } from "@pawanpaudel93/m3u-parser"
 
    const userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36"
    const parser = new M3uParser(userAgent);
    (async () => {
        await parser.parseM3u("https://iptv-org.github.io/iptv/countries/np.m3u")
        console.log(parser.getStreamsInfo())
    })();
 * ```
 */
export class M3uParser {
    streamsInfo = [];
    streamsInfoBackup = [];
    lines = [];
    checkLive = true;
    content = '';
    timeout;
    userAgent;
    isNodeJS;
    regexes = {
        tvgName: new RegExp('tvg-name="(.*?)"', 'i'),
        tvgID: new RegExp('tvg-id="(.*?)"', 'i'),
        tvgLogo: new RegExp('tvg-logo="(.*?)"', 'i'),
        tvgURL: new RegExp('tvg-url="(.*?)"', 'i'),
        tvgCountry: new RegExp('tvg-country="(.*?)"', 'i'),
        tvgLanguage: new RegExp('tvg-language="(.*?)"', 'i'),
        groupTitle: new RegExp('group-title="(.*?)"', 'i'),
        title: new RegExp('([^,]+)$', 'i'),
        streams: new RegExp('acestream://[a-zA-Z0-9]+'),
        file: new RegExp('^[a-zA-Z]:\\((?:.*?\\)*).*.[dw]{3,5}$|^/(?:[^/]*)+/?.[dw]{3,5}$'),
    };
    constructor(options = {}) {
        const defaultUserAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36';
        const defaultTimeout = 5;
        this.userAgent = options.userAgent || defaultUserAgent;
        this.timeout = (options.timeout || defaultTimeout) * 1000;
        this.isNodeJS = typeof window === 'undefined';
    }
    async axiosGet(url) {
        const response = await axios.get(url, {
            headers: {
                'User-Agent': this.userAgent,
            },
            timeout: this.timeout,
        });
        return response;
    }
    async parseLines() {
        const numberOfLines = this.lines.length;
        const promises = [];
        for (let i = 0; i < numberOfLines; i++) {
            if (this.lines[i].includes('#EXTINF')) {
                promises.push(new Promise((resolve) => {
                    this.parseLine(i, resolve);
                }));
            }
        }
        await Promise.all(promises);
        this.streamsInfoBackup = Object.assign([], this.streamsInfo);
    }
    getValue(line, type) {
        const match = this.regexes[type].exec(line);
        return match ? match[1] : null;
    }
    async parseLine(lineNumber, resolve) {
        const lineInfo = this.lines[lineNumber];
        let streamLink = '';
        let live = false;
        try {
            for (const i of [1, 2]) {
                const line = this.lines[lineNumber + i];
                const isAceStream = this.getValue(line, 'streams');
                if (line && (isAceStream || isURL(line))) {
                    streamLink = line;
                    if (isAceStream) {
                        live = true;
                    }
                    break;
                }
                else if (line && this.getValue(line, 'file')) {
                    live = true;
                    streamLink = line;
                    break;
                }
            }
        }
        catch (error) {
            //
        }
        if (lineInfo && streamLink) {
            if (this.checkLive && !live) {
                try {
                    const response = await this.axiosGet(streamLink);
                    live = response.status === 200;
                }
                catch (err) {
                    //
                }
            }
            const title = this.getValue(lineInfo, 'title');
            const logo = this.getValue(lineInfo, 'tvgLogo');
            const category = this.getValue(lineInfo, 'groupTitle');
            const tvgID = this.getValue(lineInfo, 'tvgID');
            const tvgName = this.getValue(lineInfo, 'tvgName');
            const tvgURL = this.getValue(lineInfo, 'tvgURL');
            const country = this.getValue(lineInfo, 'tvgCountry');
            const language = this.getValue(lineInfo, 'tvgLanguage');
            const info = {
                name: title,
                logo,
                url: streamLink,
                category,
                tvg: {
                    id: tvgID,
                    name: tvgName,
                    url: tvgURL,
                },
                country: {
                    code: country,
                    name: getName(country, 'en', {
                        select: 'official',
                    }) ?? null,
                },
                language: {
                    code: language ? ISO6391.getCode(language) || null : null,
                    name: language,
                },
            };
            if (this.checkLive) {
                info.live = live;
            }
            this.streamsInfo.push(info);
        }
        resolve();
    }
    getM3U() {
        const content = ['#EXTM3U'];
        for (const stream of this.streamsInfo) {
            const { name, logo, url, category, tvg, country, language } = stream;
            let line = '#EXTINF:-1';
            if (tvg) {
                if (tvg.id)
                    line += ` tvg-id="${tvg.id}"`;
                if (tvg.name)
                    line += ` tvg-name="${tvg.name}"`;
                if (tvg.url)
                    line += ` tvg-url="${tvg.url}"`;
            }
            if (logo) {
                line += ` tvg-logo="${stream.logo}"`;
            }
            if (country && country.code) {
                line += ` tvg-country="${stream.country.code}"`;
            }
            if (language && language.name) {
                line += ` tvg-language="${stream.language.name}"`;
            }
            if (category) {
                line += ` group-title="${stream.category}"`;
            }
            if (name) {
                line += `,${name}`;
            }
            content.push(line);
            content.push(url);
        }
        return content.join('\n');
    }
    getShuffledArr = (arr) => {
        const newArr = arr.slice();
        for (let i = newArr.length - 1; i > 0; i--) {
            const rand = Math.floor(Math.random() * (i + 1));
            [newArr[i], newArr[rand]] = [newArr[rand], newArr[i]];
        }
        return newArr;
    };
    /**Parses the content of local file/URL.
     *
     * It downloads the file from the given url or use the local file path to get the content or read the file in the browser and parses line by line to a structured format of streams information.
     * @param {string | File} fileOrPath - Path/URL to the M3U file or file itself in browser.
     * @param {boolean} [checkLive=true] - Check if the stream is live
     * @returns {Promise<void>} - Promise that resolves when the file is parsed
     */
    async parseM3u(fileOrPath, checkLive = true) {
        this.checkLive = checkLive;
        this.lines.length = 0;
        try {
            if (typeof fileOrPath === 'string') {
                if (this.isNodeJS) {
                    if (isURL(fileOrPath)) {
                        const response = await this.axiosGet(fileOrPath);
                        this.content = response.data;
                    }
                    else {
                        const fs = await import('fs');
                        this.content = fs.readFileSync(fileOrPath, 'utf8');
                    }
                }
                else {
                    const response = await this.axiosGet(fileOrPath);
                    this.content = response.data;
                }
            }
            else {
                this.content = await new Response(fileOrPath).text();
            }
        }
        catch (error) {
            throw new Error(error);
        }
        this.lines = this.content.split('\n').filter((line) => line.trim());
        if (this.lines.length > 0) {
            await this.parseLines();
        }
        else {
            throw new Error('No content found to parse');
        }
    }
    /**Save to file (JSON or M3U)
     *
     * It saves streams information as a JSON, or M3U file with a given filename and format parameters.
     * @param {string} fileNameOrPath - Path or file name to save the file.
     * @param {string} [format='json'] - Format of the file to save. Can be 'json' or 'm3u'.
     * @returns {void}
     */
    async saveToFile(fileNameOrPath, format = 'json') {
        format = fileNameOrPath.split('.').length > 1 ? fileNameOrPath.split('.').pop() : format;
        if (!fileNameOrPath.includes(`.${format}`)) {
            fileNameOrPath = `${fileNameOrPath}.${format}`;
        }
        if (this.isNodeJS) {
            const fs = await import('fs');
            if (format === 'json') {
                fs.writeFileSync(fileNameOrPath, this.getJSON());
            }
            else if (format === 'm3u') {
                fs.writeFileSync(fileNameOrPath, this.getM3U());
            }
        }
        else {
            let data = '';
            if (format === 'json') {
                data = this.getJSON(2);
            }
            else if (format === 'm3u') {
                data = this.getM3U();
            }
            const element = document.createElement('a');
            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(data));
            element.setAttribute('download', fileNameOrPath);
            element.style.display = 'none';
            document.body.appendChild(element);
            element.click();
            document.body.removeChild(element);
        }
    }
    /**Get the streams information as json
     * @param {number} [indent=4] - Indentation level
     * @returns {string} - JSON string of the parsed M3U file
     */
    getJSON(indent = 4) {
        return JSON.stringify(this.streamsInfo, null, indent);
    }
    /**Get the parsed streams information list.
     * @returns {StreamInfo[]} - Array of StreamInfo objects
     */
    getStreamsInfo() {
        return this.streamsInfo;
    }
    /**Reset the stream information list to initial state before various operations.
     * @returns {void}
     */
    resetOperations() {
        this.streamsInfo = Object.assign([], this.streamsInfoBackup);
    }
    /**Filter streams information.
     *
     * It retrieves/removes stream information from streams information list using filters on key.
     * If key is not found, it will not raise error and filtering is done silently.
     * @param {string} key - Key can be single or nested. eg. key='name', key='language-name'
     * @param {string[]| boolean[]} filters - List of filters to perform the retrieve or remove operation.
     * @param {boolean} [retrieve=true] - True to retrieve and False for removing based on key.
     * @param {boolean} [nestedKey=false] - True/False for if the key is nested or not.
     * @param {string} [keySplitter='-'] - A splitter to split the nested keys. Default: "-"
     * @returns {void}
     */
    filterBy(key, filters, retrieve = true, nestedKey = false, keySplitter = '-') {
        if (filters.length === 0)
            return;
        let [key0, key1] = ['', ''];
        if (nestedKey) {
            [key0, key1] = key.split(keySplitter);
            if (key0 === undefined || key1 === undefined) {
                throw new Error(`Invalid nested key: ${key} with keySplitter: ${keySplitter}`);
            }
        }
        const filtersRegex = new RegExp(filters.join('|'), 'i');
        this.streamsInfo = this.streamsInfo.filter((stream) => {
            let check;
            if (nestedKey) {
                check = filtersRegex.test(stream[key0][key1]);
            }
            else {
                check = filtersRegex.test(stream[key]);
            }
            if (retrieve)
                return check;
            return !check;
        });
    }
    /**Retrieve only streams information with certain extensions.
     *
     * It retrieves the stream information based on extensions provided.
     * @param {string[]} extensions - List of extensions like mp4, m3u8 etc.
     * @returns {void}
     */
    retrieveByExtension(extensions) {
        this.filterBy('url', extensions, true);
    }
    /**Removes streams information with certain extensions.
     *
     * It removes stream information based on extensions provided.
     * @param {string[]} extensions - List of extensions like mp4, m3u8 etc.
     * @returns {void}
     */
    removeByExtension(extensions) {
        this.filterBy('url', extensions, false);
    }
    /**Retrieve only streams information with certain categories.
     *
     * It retrieves stream information based on categories provided.
     * @param {string[]|boolean[]} categories - List of categories to perform the retrieve or remove operation.
     */
    retrieveByCategory(categories) {
        this.filterBy('category', categories, true);
    }
    /**Removes streams information with certain categories.
     *
     * It removes stream information based on categories provided..
     * @param {string[]|boolean[]} categories - List of categories to perform the retrieve or remove operation.
     */
    removeByCategory(categories) {
        this.filterBy('category', categories, true);
    }
    /**Sort streams information.
     *
     * It sorts streams information list sorting by key in asc/desc order.
     * @param {string} key - Key to sort by. It can be single or nested key.
     * @param {boolean} [asc=true] - True for ascending and False for descending.
     * @param {boolean} [nestedKey=false] - True/False for if the key is nested or not.
     * @param {string} [keySplitter='-'] - A splitter to split the nested keys. Default: "-"
     * @returns {void}
     */
    sortBy(key, asc = true, nestedKey = false, keySplitter = '-') {
        let [key0, key1] = ['', ''];
        if (nestedKey) {
            [key0, key1] = key.split(keySplitter);
            if (key0 === undefined || key1 === undefined) {
                throw new Error(`Invalid nested key: ${key} with keySplitter: ${keySplitter}`);
            }
        }
        this.streamsInfo.sort((a, b) => {
            let aValue, bValue;
            if (nestedKey) {
                aValue = a[key0][key1];
                bValue = b[key0][key1];
            }
            else {
                aValue = a[key];
                bValue = b[key];
            }
            if (aValue === null && bValue === null) {
                return 0;
            }
            else if (aValue === null) {
                return asc ? -1 : 1;
            }
            else if (bValue === null) {
                return asc ? 1 : -1;
            }
            if (asc) {
                return aValue.localeCompare(bValue);
            }
            else {
                return bValue.localeCompare(aValue);
            }
        });
    }
    /**Return a random stream information
     *
     * It returns a random stream information with shuffle if required.
     * @param {boolean} [shuffle=true] - True to shuffle and False for not.
     * @returns {StreamInfo} - Stream information object.
     */
    getRandomStream(shuffle = true) {
        if (shuffle) {
            this.streamsInfo = this.getShuffledArr(this.streamsInfo);
        }
        return this.streamsInfo[Math.floor(Math.random() * this.streamsInfo.length)];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sVUFBVSxNQUFNLGFBQWEsQ0FBQztBQUNyQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDN0MsT0FBTyxPQUFPLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sS0FBSyxNQUFNLHFCQUFxQixDQUFDO0FBRXhDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQThDbEM7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNILE1BQU0sT0FBTyxTQUFTO0lBQ1IsV0FBVyxHQUFpQixFQUFFLENBQUM7SUFDL0IsaUJBQWlCLEdBQWlCLEVBQUUsQ0FBQztJQUNyQyxLQUFLLEdBQWEsRUFBRSxDQUFDO0lBQ3JCLFNBQVMsR0FBRyxJQUFJLENBQUM7SUFDakIsT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNiLE9BQU8sQ0FBUztJQUNoQixTQUFTLENBQVM7SUFDbEIsUUFBUSxDQUFVO0lBQ2xCLE9BQU8sR0FBRztRQUNoQixPQUFPLEVBQUUsSUFBSSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDO1FBQzVDLEtBQUssRUFBRSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUM7UUFDeEMsT0FBTyxFQUFFLElBQUksTUFBTSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQztRQUM1QyxNQUFNLEVBQUUsSUFBSSxNQUFNLENBQUMsaUJBQWlCLEVBQUUsR0FBRyxDQUFDO1FBQzFDLFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxHQUFHLENBQUM7UUFDbEQsV0FBVyxFQUFFLElBQUksTUFBTSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsQ0FBQztRQUNwRCxVQUFV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